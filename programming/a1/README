cs260-fl22-a1 programming assignment

[ To do ]
See the starter code: 
https://github.com/bfilin/fl22data/blob/main/programming/a1/cs260_fl22_a1.py

In this assignment you will finish the implementation of the Python Nums class 
that includes all of the following following methods:
    get_number()
    get_number_base()
    get_new_base()
    set_number()
    set_new_base()
    weighted_sum()    
    repeated_division()
    number_converter()
    __repr__()  
    
    
    This class will allow you to convert to/from:
        decimal/binary, decimal/octal and decimal/hexadecimal

    Note(s): 
        * Description of each method can be found in the method docstring.
   
        * Do not modify the constructor method, -20 points penalty.
    
        * The input parameter values and output values for the methods of our 
          Nums class should be of str class (strings), -10 point penalty will
          be applied if your methods return some other data types.


[ Additional Description ]
Another reminder - do not modify the constructor!
The constructor takes three arguments of string data type:
        num: number
             For example: num = '1011'
             Other methods can access self.num
       base: describes the current base of num
             For example: base = '2'
             Other methods can access self.base
   new_base: indicates that conversion should be done to the new_base
             For example: new_base = '10'
             Other methods can access self.new_base

             Note: you can ignore the debug parameter for now.

    This means:
        If we create the object from Nums class with our example values:
        obj1 = Nums(num = '1011', base = '2', new_base = '10')
        We are saying:
            Please create an object from our Nums class such that:
            * num is a binary number and we would like to convert it
            to a new decimal base. 

            * However the conversion should only take place if we call
            the appropriate method that does conversion to decimal.

        Again let us take a look at our example obj1. 
        If you have implemented weighted_sum method correctly:
            calling obj1.weighted_sum() we expect '11' to be returned
        If you have implemented number_converter() method correctly:
            calling obj1.number_converter() expect '11' to be returned


[ Suggested order for implementation ]
    implement and test all of the getters (very easy)
    implement and test all of the setters (very easy)
    implement and test weighted_sum()    
    implement and test repeated_division()
    implement and test __repr__() method

    finally implement and test number_converter():
        it decides which method should be called:
            weighted_sum()
            repeated_division()



[ Testing ]     
    Make sure to test all of your your methods!
    Create the objects from your class and as you implement your methods
    test them to see if they work correctly. 

    Your code shuld be able to make of the following conversions:
        from decimal to binary
        from decimal to octal
        from decimal to hexadecimal
        from binary to decimal
        from octal to decimal
        from hexadecimal to decimal


[ Submit ]
    Due on Sep 29th, end of the day.
    You can use our cs260-fl22 Repl.it teams for education, look for project named cs260-A1 on repl.it
    Place your finished python code in your CS260 GitHub repository, preferably under Programming/CS260-A1 sub directory structure

